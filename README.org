#+TITLE: Configurations for the Malestrom
#+PROPERTY: header-args :tangle yes :noweb yes :results silent

* Introduction

This repository contains configurations for Nix(OS) and emacs.
Most of the the configuration files are generated by [[http://orgmode.org/worg/org-contrib/babel/][org-babel]] from this org file using the principles of [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]].

To generate the nix files and init.el files, you can open file in Emacs, and execute =M-x org-babel-tangle= or from command line with the following command.

#+begin_src sh :tangle no
emacs README.org --batch -f org-babel-tangle
#+end_src

#+RESULTS:

All files in this repository are generated from and synced this very README, they are exported to allow the repo to be a valid nix flake and to bootstrap emacs.

* Table of Contents :TOC_3:
- [[#introduction][Introduction]]
- [[#flake][Flake]]
- [[#hardware][Hardware]]
  - [[#hosts][Hosts]]
    - [[#tx220][tx220]]
- [[#nixos][NixOS]]
  - [[#nixpkgs][NixPkgs]]
  - [[#stable-package][Stable Package]]
- [[#home-manager][Home-Manager]]
- [[#emacs][Emacs]]
  - [[#installation][Installation]]
  - [[#bootstrap-emacs-config][Bootstrap Emacs config]]
  - [[#patch-ob-tangle][Patch ob-tangle]]

* Flake
This repository is a valid nix-flake, to allow this, emacs generates a ~flake.nix~ file from this README file.
#+begin_src nix :tangle flake.nix :noweb no-export :padline no
#
# This file is auto-generated from "README.org"
#
{
  description = "Malestrom configuration";

  inputs = {
    <<flake-inputs-nixpkgs>>
    <<flake-inputs-stable>>
    <<flake-inputs-home-manager>>
    <<flake-inputs-hardware>>
    <<flake-inputs-emacs>>
  };

  outputs = { home-manager, nixpkgs, ... }@inputs:
   {
    nixosConfigurations = {
      tx220 = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        modules = [
          ./tx220.nix
          home-manager.nixosModules.home-manager
          {
            home-manager.useGlobalPkgs = true;
            home-manager.useUserPackages = true;
            home-manager.users.jak = import ./home.nix;
          }
        ];
      };
    };
  };
}

#+end_src
* Hardware
Add preset hardware configurations from NixOS managed repository
#+name: flake-inputs-hardware
#+begin_src nix
nixos-hardware = {
  type = "github";
  owner = "NixOS";
  repo = "nixos-hardware";
  flake = false;
};
#+end_src
** Hosts
*** tx220
This is my Thinkpad X220i Tablet
#+name: machine-tx220
#+begin_src nix :tangle tx220.nix :noweb no-export :padline no
#
# This file is auto-generated by "README.org"
#

{ name, config, lib, pkgs, inputs, modulesPath, ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      (modulesPath + "/installer/scan/not-detected.nix")
    ];

  # Use the systemd-boot EFI boot loader.
  nix = {
    package = pkgs.nixFlakes;
    extraOptions = ''
      experimental-features = nix-command flake
    '';
  };
  boot = {
    initrd = {
      availableKernelModules = [ "ehci_pci" "ahci" "usb_storage" "usbhid" "sd_mod" "sdhci_pci" ];
      kernelModules = [ ];
    };
    kernelModules = [ ];
    extraModulePackages = [ ];
    loader = {
      efi.canTouchEfiVariables = true;
      systemd-boot.enable = true;
    };
  };

  fileSystems = {
    "/" = {
      device = "/dev/disk/by-uuid/9764dad1-f717-4c38-a51d-708086409451";
      fsType = "ext4";
    };
    "/home" = {
      device = "/dev/disk/by-uuid/372b97bb-3b92-4cdc-bac1-d9d13d115f64";
      fsType = "ext4";
    };
    "/boot" = {
      device = "/dev/disk/by-uuid/0AA4-0CAC";
      fsType = "vfat";
    };
  };
  swapDevices = [
    { device = "/dev/disk/by-uuid/349644fc-633a-4e84-b55f-37576f6033bd"; }
  ];

  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
  networking.hostName = "tx220"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Set your time zone.
  time.timeZone = "America/Phoenix";

  # The global useDHCP flag is deprecated, therefore explicitly set to false here.
  # Per-interface useDHCP will be mandatory in the future, so this generated config
  # replicates the default behaviour.
  # networking.useDHCP = true;
  # networking.interfaces.enp0s25.useDHCP = true;
  # networking.interfaces.wlp3s0.useDHCP = true;
  networking.networkmanager.enable = true;

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Select internationalisation properties.
  # i18n.defaultLocale = "en_US.UTF-8";
  # console = {
  #   font = "Lat2-Terminus16";
  #   keyMap = "us";
  # };



  # Configure keymap in X11
  services.xserver.layout = "us";
  # services.xserver.xkbOptions = "eurosign:e";

  # Enable CUPS to print documents.
  # services.printing.enable = true;

  # Enable sound.
  sound.enable = true;
  hardware.pulseaudio.enable = true;

  # Enable touchpad support (enabled default in most desktopManager).
  # services.xserver.libinput.enable = true;

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.jak = {
    isNormalUser = true;
    extraGroups = [ "wheel" "networkmanager"]; # Enable ‘sudo’ for the user.
  };

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    wget vim
  ];

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  services.openssh.enable = true;
  services.xserver.enable = true;
  services.xserver.windowManager.i3.enable = true;
  services.xserver.displayManager.defaultSession = "none+i3";

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "20.09"; # Did you read the comment?

}
#+end_src
* NixOS
These are base system settings for NixOS, including system and hardware settings.
** NixPkgs
#+begin_src nix
nixpkgs = {
  type = "github";
  owner = "NixOS";
  repo = "nixpkgs";
  ref = "nixpkgs-unstable"
}
#+end_src
** Stable Package
For packages that are broken in nixpkgs-unstable, expose the latest stable channel as ~pkgs.stable~.

Add input:
#+name: flake-inputs-stable
#+begin_src nix
nixpkgs-stable = {
  type = "github";
  owner = "NixOS";
  repo = "nixpkgs"
  ref = "nixos-20.09";
}
#+end_src
* Home-Manager
Used to manage user dotfiles, including on non-NixOS hosts

Add Home-Manager to flake inputs.
#+name: flake-inputs-home-manager
#+begin_src nix
home-manager = {
  type = "github";
  owner = "nix-community";
  repo = "home-manager";
  ref = "master";
  inputs.nixpkgs.follows = "nixpkgs";
};
#+end_src

#+begin_src nix :tangle home.nix :noweb no-export :padline no
{ config, lib, pkgs, ... }:

{
  home.packages = with pkgs; [
    htop
    fortune
    brave
    dmenu
    wget
  ];

  <<flake-packages-emacs>>


  services.gpg-agent = {
    enable = true;
    defaultCacheTtl = 1800;
    enableSshSupport = true;
  };

  programs.home-manager = {
    enable = true;
    path = "…";
  };
}

#+end_src
* Emacs
** Installation
Add emacs overlay repo for NixOS
#+name: flake-inputs-emacs
#+begin_src nix
emacs-overlay = {
  type = "github";
  owner = "nix-community";
  repo = "emacs-overlay";
};
#+end_src
Use overlay (~<<flake-overlays-emacs>>~).
#+name: flake-overlays-emacs
#+begin_src nix
inputs.emacs-overlay.overlay
#+end_src

Expose Emacs with my packages as a top-level package
(~<<flake-packages-emacs>>~)
#+name: flake-packages-emacs
#+begin_src nix
{  programs.emacs = {
    enable = true;
    #package = pkgs.emacsGit;
    extraPackages = (epkgs:
      (with epkgs.melpaPackages; [
        aggressive-indent
        avy
        bash-completion
        beacon
        blacken
        cider
        clojure-mode
        cmake-mode
        color-identifiers-mode
        company
        company-box
        company-lsp
        company-org-roam
        counsel
        counsel-projectile
        diff-hl
        diminish
        direnv
        dockerfile-mode
        doom-modeline
        dtrt-indent
        edit-indirect
        eglot
        el-patch
        elpy
        epresent
        evil
        evil-collection
        evil-magit
        evil-numbers
        evil-org
        evil-surround
        evil-swap-keys
        fish-completion
        fish-mode
        flycheck
        flycheck-inline
        flycheck-jest
        flycheck-rust
        forth-mode
        general
        gitconfig-mode
        go-mode
        google-translate
        graphviz-dot-mode
        groovy-mode
        haskell-mode
        imenu-list
        ivy
        ivy-bibtex
        ivy-pass
        jinja2-mode
        js2-mode
        json-mode
        ledger-mode
        lispyville
        lsp-haskell
        lsp-mode
        lsp-ui
        lua-mode
        magit
        markdown-mode
        modus-themes
        nix-mode
        nix-sandbox
        notmuch
        org-cliplink
        org-download
        org-drill
        org-ref
        org-roam
        org-roam-bibtex
        org-super-agenda
        paren-face
        pass
        php-mode
        pip-requirements
        plantuml-mode
        prettier-js
        projectile
        protobuf-mode
        psc-ide
        purescript-mode
        py-autopep8
        racer
        racket-mode
        restclient
        rjsx-mode
        rust-mode
        smex
        spaceline
        terraform-mode
        tide
        toc-org
        typescript-mode
        use-package
        visual-fill-column
        vterm
        vue-mode
        w3m
        web-mode
        wgrep
        which-key
        whitespace-cleanup-mode
        writegood-mode
        yaml-mode
        yasnippet
      ]) ++
      [
        epkgs.orgPackages.org-plus-contrib
        epkgs.elpaPackages.adaptive-wrap
        epkgs.exwm
      ]
      );
  };
  services.emacs.enable = true;
  }
#+end_src
** Warning
   Put a warning header into [[file:init.el][init.el]] that it is written by this very README file
   #+begin_src emacs-lisp
     ;;
     ;; This file is generated by README.org
     ;; All changes are futile.
     ;;
   #+end_src
** Startup performance
   Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.

   #+begin_src emacs-lisp
     ;; The default is 800 kilobytes.  Measured in bytes.
     (setq gc-cons-threshold (* 50 1000 1000))

     ;; Profile emacs startup
     (add-hook 'emacs-startup-hook
	       (lambda ()
		 (message "*** Emacs loaded in %s with %d garbage collections."
			  (format "%.2f seconds"
				  (float-time
				   (time-subtract after-init-time before-init-time)))
			  gcs-done)))
   #+end_src
** Package
   All packages should be installed through nix, so this snippet disables emacs internal package archive
   #+begin_src emacs-lisp
     (require 'package)
     (setq package-archive nil)
     (setq package-enable-at-startup nil)
   #+end_src
** Use-Package
   [[https:github.com/jwiegley/use-package][use-package]] is an emacs library that helps manage emacs configuration, making it simpler and more constructed
   #+begin_src emacs-lisp
     ;; Do not ensure packages---they are installed with Nix
     (setq use-package-always-ensure nil)
     ;; (setq use-package-verbose t)
     (eval-when-compile
       (require 'use-package))
     (require 'bind-key)
     (require 'diminish)
   #+end_src
** UI Configuration
*** Basics
    #+begin_src emacs-lisp
      (setq inhibit-startup-message t)

      (scroll-bar-mode -1)
      (tool-bar-mode -1)
      (tooltip-mode -1)
      (set-fringe-mode 10)

      (menu-bar-mode -1)

      (setq visible-bell t)

      (column-number-mode)
      (global-display-line-numbers-mode t)

      (dolist (mode '(org-mode-hook
		      term-mode-hook
		      shell-mode-hook
		      treemacs-mode-hook
		      eshell-mode-hook))
	(add-hook mode (lambda () (display-line-numbers-mode 0))))
    #+end_src
