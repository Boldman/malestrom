#+TITLE: Configurations for the Malestrom
#+PROPERTY: header-args :tangle yes :noweb yes :results silent

* Introduction

This repository contains configurations for Nix(OS) and emacs.
All of the the configuration files are generated by [[http://orgmode.org/worg/org-contrib/babel/][org-babel]] from this org file using the principles of [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]].

To generate the nix files and init.el files, you can open file in Emacs, and execute =M-x org-babel-tangle= or from command line with the following command.

#+begin_src sh :tangle no
emacs README.org --batch -f org-babel-tangle
#+end_src

#+RESULTS:

All files in this repository are generated from and synced this very README, they are exported to allow the repo to be a valid nix flake and to bootstrap emacs.

* Table of Contents :TOC_4:
- [[#introduction][Introduction]]
- [[#flake][Flake]]
- [[#hardware][Hardware]]
  - [[#hosts][Hosts]]
    - [[#tx220][tx220]]
- [[#nixos][NixOS]]
  - [[#nixpkgs][NixPkgs]]
  - [[#stable-package][Stable Package]]
- [[#home-manager][Home-Manager]]
- [[#emacs][Emacs]]
  - [[#installation][Installation]]
  - [[#warning][Warning]]
  - [[#startup-performance][Startup performance]]
  - [[#package][Package]]
  - [[#use-package][Use-Package]]
  - [[#server-mode][Server Mode]]
  - [[#desktop-environment][Desktop Environment]]
    - [[#window-managment][Window Managment]]
    - [[#helper-functions][Helper Functions]]
  - [[#ui-configuration][UI Configuration]]
    - [[#basics][Basics]]
  - [[#keybindings][Keybindings]]
    - [[#esc-cancels-all][ESC cancels all]]
    - [[#evil][Evil]]
    - [[#which-key][Which-key]]
    - [[#general][General]]
  - [[#general-configuration][General Configuration]]
    - [[#user-interface][User Interface]]
    - [[#theme][Theme]]
    - [[#font][Font]]
    - [[#mode-line][Mode Line]]
      - [[#basic-customization][Basic Customization]]
      - [[#enable-mode-diminishing][Enable Mode Diminishing]]
      - [[#doom-modeline][Doom Modeline]]
    - [[#notifications][Notifications]]
    - [[#auto-saving-changed-files][Auto-Saving Changed Files]]
    - [[#auto-reverting][Auto-reverting]]
    - [[#ui-toggles][UI Toggles]]
    - [[#highlight-matching-braces][Highlight Matching Braces]]
    - [[#tramp][Tramp]]
    - [[#emacs-as-external-editor][Emacs as External Editor]]
  - [[#editing-configuration][Editing Configuration]]
    - [[#tab-widths][Tab Widths]]
    - [[#use-spaces-instead-of-tabs][Use spaces instead of tabs]]
    - [[#commenting-lines][Commenting Lines]]
    - [[#automatically-clean-whitespace][Automatically clean whitespace]]
  - [[#configuration-files][Configuration Files]]
    - [[#helpers][Helpers]]
  - [[#org-mode][Org Mode]]
    - [[#org-configuration][Org Configuration]]
    - [[#file-paths][File Paths]]
    - [[#workflow-states][Workflow States]]
    - [[#tags][Tags]]
    - [[#agendas][Agendas]]
    - [[#capture-templates][Capture Templates]]
    - [[#source-editing][Source editing]]
    - [[#block-templates][Block Templates]]
    - [[#pomodoro][Pomodoro]]
    - [[#searching][Searching]]
    - [[#bindings][Bindings]]
    - [[#automatically-tangle-on-save][Automatically "Tangle" on Save]]
    - [[#closing][Closing]]
  - [[#development][Development]]
    - [[#git][git]]
      - [[#magit][magit]]
      - [[#magit-todos][magit-todos]]
      - [[#git-link][git-link]]
    - [[#projectile][Projectile]]
      - [[#initial-setup][Initial Setup]]
    - [[#languages][Languages]]
      - [[#language-server-support][Language Server Support]]
      - [[#meta-lisp][Meta Lisp]]
      - [[#scheme][Scheme]]
      - [[#emacs-lisp][Emacs Lisp]]
      - [[#scheme-1][Scheme]]
      - [[#markdown][Markdown]]
      - [[#html][HTML]]
  - [[#productivity][Productivity]]
    - [[#syntax-checking-with-flycheck][Syntax checking with Flycheck]]
    - [[#snippets][Snippets]]
    - [[#smart-parens][Smart Parens]]
    - [[#rainbow-delimiters][Rainbow Delimiters]]
    - [[#rainbow-mode][Rainbow Mode]]
  - [[#writing-prose][Writing (Prose)]]
    - [[#darkroom][Darkroom]]
  - [[#applications][Applications]]
    - [[#binding-prefix][Binding Prefix]]
    - [[#mail][Mail]]
      - [[#mu4e][mu4e]]
    - [[#calendar][Calendar]]
    - [[#finance][Finance]]
    - [[#emms][EMMS]]
  - [[#system-utilites][System Utilites]]
    - [[#guix][Guix]]
    - [[#deamons][Deamons]]
    - [[#pulseaudio][PulseAudio]]
- [[#inspiration][Inspiration]]

* Flake
This repository is a valid nix-flake, to allow this, emacs generates a ~flake.nix~ file from this README file.
#+begin_src nix :tangle flake.nix :noweb no-export :padline no
#
# This file is auto-generated from "README.org"
#
{
  description = "Malestrom configuration";

  inputs = {
    <<flake-inputs-nixpkgs>>
    <<flake-inputs-stable>>
    <<flake-inputs-home-manager>>
    <<flake-inputs-hardware>>
    <<flake-inputs-emacs>>
  };

  outputs = { home-manager, nixpkgs, ... }@inputs:
   {
    nixosConfigurations = {
      tx220 = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        modules = [
          ./tx220.nix
          home-manager.nixosModules.home-manager
          {
            home-manager.useGlobalPkgs = true;
            home-manager.useUserPackages = true;
            home-manager.users.jak = import ./home.nix;
          }
        ];
      };
    };
  };
}

#+end_src
* Hardware
Add preset hardware configurations from NixOS managed repository
#+name: flake-inputs-hardware
#+begin_src nix
nixos-hardware = {
  type = "github";
  owner = "NixOS";
  repo = "nixos-hardware";
  flake = false;
};
#+end_src
** Hosts
*** tx220
This is my Thinkpad X220i Tablet
#+name: machine-tx220
#+begin_src nix :tangle tx220.nix :noweb no-export :padline no
#
# This file is auto-generated by "README.org"
#

{ name, config, lib, pkgs, inputs, modulesPath, ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      (modulesPath + "/installer/scan/not-detected.nix")
    ];

  # Use the systemd-boot EFI boot loader.
  nix = {
    package = pkgs.nixFlakes;
    extraOptions = ''
      experimental-features = nix-command flake
    '';
  };
  boot = {
    initrd = {
      availableKernelModules = [ "ehci_pci" "ahci" "usb_storage" "usbhid" "sd_mod" "sdhci_pci" ];
      kernelModules = [ ];
    };
    kernelModules = [ ];
    extraModulePackages = [ ];
    loader = {
      efi.canTouchEfiVariables = true;
      systemd-boot.enable = true;
    };
  };

  fileSystems = {
    "/" = {
      device = "/dev/disk/by-uuid/9764dad1-f717-4c38-a51d-708086409451";
      fsType = "ext4";
    };
    "/home" = {
      device = "/dev/disk/by-uuid/372b97bb-3b92-4cdc-bac1-d9d13d115f64";
      fsType = "ext4";
    };
    "/boot" = {
      device = "/dev/disk/by-uuid/0AA4-0CAC";
      fsType = "vfat";
    };
  };
  swapDevices = [
    { device = "/dev/disk/by-uuid/349644fc-633a-4e84-b55f-37576f6033bd"; }
  ];

  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
  networking.hostName = "tx220"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Set your time zone.
  time.timeZone = "America/Phoenix";

  # The global useDHCP flag is deprecated, therefore explicitly set to false here.
  # Per-interface useDHCP will be mandatory in the future, so this generated config
  # replicates the default behaviour.
  # networking.useDHCP = true;
  # networking.interfaces.enp0s25.useDHCP = true;
  # networking.interfaces.wlp3s0.useDHCP = true;
  networking.networkmanager.enable = true;

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Select internationalisation properties.
  # i18n.defaultLocale = "en_US.UTF-8";
  # console = {
  #   font = "Lat2-Terminus16";
  #   keyMap = "us";
  # };



  # Configure keymap in X11
  services.xserver.layout = "us";
  # services.xserver.xkbOptions = "eurosign:e";

  # Enable CUPS to print documents.
  # services.printing.enable = true;

  # Enable sound.
  sound.enable = true;
  hardware.pulseaudio.enable = true;

  # Enable touchpad support (enabled default in most desktopManager).
  # services.xserver.libinput.enable = true;

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.jak = {
    isNormalUser = true;
    extraGroups = [ "wheel" "networkmanager"]; # Enable ‘sudo’ for the user.
  };

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    wget vim
  ];

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  services.openssh.enable = true;
  services.xserver.enable = true;
  services.xserver.windowManager.i3.enable = true;
  services.xserver.displayManager.defaultSession = "none+i3";

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "20.09"; # Did you read the comment?

}
#+end_src
* NixOS
These are base system settings for NixOS, including system and hardware settings.
** NixPkgs
#+begin_src nix
nixpkgs = {
  type = "github";
  owner = "NixOS";
  repo = "nixpkgs";
  ref = "nixpkgs-unstable"
}
#+end_src
** Stable Package
For packages that are broken in nixpkgs-unstable, expose the latest stable channel as ~pkgs.stable~.

Add input:
#+name: flake-inputs-stable
#+begin_src nix
nixpkgs-stable = {
  type = "github";
  owner = "NixOS";
  repo = "nixpkgs";
  ref = "nixos-20.09";
};
#+end_src
* Home-Manager
Used to manage user dotfiles, including on non-NixOS hosts

Add Home-Manager to flake inputs.
#+name: flake-inputs-home-manager
#+begin_src nix
home-manager = {
  type = "github";
  owner = "nix-community";
  repo = "home-manager";
  ref = "master";
  inputs.nixpkgs.follows = "nixpkgs";
};
#+end_src

#+begin_src nix :tangle home.nix :noweb no-export :padline no
{ config, lib, pkgs, ... }:

{
  home.packages = with pkgs; [
    htop
    fortune
    brave
    dmenu
    wget
  ];

  <<flake-packages-emacs>>


  services.gpg-agent = {
    enable = true;
    defaultCacheTtl = 1800;
    enableSshSupport = true;
  };

  programs.home-manager = {
    enable = true;
    path = "…";
  };
}

#+end_src
* Emacs
** Installation
Add emacs overlay repo for NixOS
#+name: flake-inputs-emacs
#+begin_src nix
emacs-overlay = {
  type = "github";
  owner = "nix-community";
  repo = "emacs-overlay";
};
#+end_src
Use overlay (~<<flake-overlays-emacs>>~).
#+name: flake-overlays-emacs
#+begin_src nix
inputs.emacs-overlay.overlay
#+end_src

Expose Emacs with my packages as a top-level package
(~<<flake-packages-emacs>>~)
#+name: flake-packages-emacs
#+begin_src nix
  {  programs.emacs = {
      enable = true;
      #package = pkgs.emacsGit;
      extraPackages = (epkgs:
	(with epkgs.melpaPackages; [
	  aggressive-indent
	  avy
	  bash-completion
	  beacon
	  blacken
	  cider
	  clojure-mode
	  cmake-mode
	  color-identifiers-mode
	  company
	  company-box
	  company-lsp
	  company-org-roam
	  counsel
	  counsel-projectile
	  darkroom
	  diff-hl
	  diminish
	  direnv
	  dockerfile-mode
	  doom-modeline
	  dtrt-indent
	  edit-indirect
	  eglot
	  el-patch
	  elpy
	  epresent
	  evil
	  evil-collection
	  evil-magit
	  evil-numbers
	  evil-org
	  evil-surround
	  evil-swap-keys
	  fish-completion
	  fish-mode
	  flycheck
	  flycheck-inline
	  flycheck-jest
	  flycheck-rust
	  forth-mode
	  general
	  gitconfig-mode
	  go-mode
	  google-translate
	  graphviz-dot-mode
	  groovy-mode
	  haskell-mode
	  imenu-list
	  ivy
	  ivy-bibtex
	  ivy-pass
	  ivy-xref
	  jinja2-mode
	  js2-mode
	  json-mode
	  ledger-mode
	  lispyville
	  lsp-haskell
	  lsp-mode
	  lsp-ui
	  lua-mode
	  magit
	  markdown-mode
	  modus-themes
	  nix-mode
	  nix-sandbox
	  notmuch
	  org-cliplink
	  org-download
	  org-drill
	  org-ref
	  org-roam
	  org-roam-bibtex
	  org-super-agenda
	  paren-face
	  pass
	  php-mode
	  pip-requirements
	  plantuml-mode
	  prettier-js
	  projectile
	  protobuf-mode
	  psc-ide
	  purescript-mode
	  py-autopep8
	  racer
	  racket-mode
	  restclient
	  rjsx-mode
	  rust-mode
	  smex
	  spaceline
          super-save
	  terraform-mode
	  tide
	  toc-org
	  typescript-mode
	  use-package
	  visual-fill-column
	  vterm
	  vue-mode
	  w3m
	  web-mode
	  wgrep
	  which-key
	  whitespace-cleanup-mode
	  writegood-mode
	  yaml-mode
	  yasnippet
	]) ++
	[
	  epkgs.orgPackages.org-plus-contrib
	  epkgs.elpaPackages.adaptive-wrap
	  epkgs.exwm
	]
	);
    };
    services.emacs.enable = true;
    }
#+end_src
** Warning
   Put a warning header into [[file:init.el][init.el]] that it is written by this very README file
   #+begin_src emacs-lisp :tangle init.el
     ;;
     ;; This file is generated by README.org
     ;; All changes are futile.
     ;;
   #+end_src
** Startup performance
   Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.

   #+begin_src emacs-lisp :tangle init.el
     ;; The default is 800 kilobytes.  Measured in bytes.
     (setq gc-cons-threshold (* 50 1000 1000))

     ;; Profile emacs startup
     (add-hook 'emacs-startup-hook
	       (lambda ()
		 (message "*** Emacs loaded in %s with %d garbage collections."
			  (format "%.2f seconds"
				  (float-time
				   (time-subtract after-init-time before-init-time)))
			  gcs-done)))
   #+end_src
** Package
   All packages should be installed through nix, so this snippet disables emacs internal package archive
   #+begin_src emacs-lisp :tangle init.el
     (require 'package)
     (setq package-archive nil)
     (setq package-enable-at-startup nil)
   #+end_src
** Use-Package
   [[https:github.com/jwiegley/use-package][use-package]] is an emacs library that helps manage emacs configuration, making it simpler and more constructed
   #+begin_src emacs-lisp :tangle init.el
     ;; Do not ensure packages---they are installed with Nix
     (setq use-package-always-ensure nil)
     ;; (setq use-package-verbose t)
     (eval-when-compile
       (require 'use-package))
     (require 'bind-key)
     (require 'diminish)
   #+end_src
** Server Mode
   Start the Emacs server from this instance so that all emacsclient calls are routed here.
   #+begin_src emacs-lisp :tangle init.el
     (server-start)
   #+end_src
** Desktop Environment
   Load up the desktop environment if on a machine that supports it and the ~--use-exwm~ argument was passed into Emacs on startup.
*** Window Managment
    Emacs is the desktop window manager provided by EXWM.
    #+begin_src emacs-lisp :tangle init.el
      (use-package exwm
	:init
	(setq mouse-autoselect-window t
	      focus-follows-mouse t
	      exwm-workspace-warp-cursor t)
	:config
	(require 'exwm-config)
	(fringe-mode 2)
	(setq exwm-workspace-show-all-buffers t)
	(setq exwm-layout-show-all-buffer t)
	(add-hook 'exwm-update-class-hook
		  (lambda ()
		    (exwm-workspace-rename-buffer exwm-class-name)))

	(exwm-enable))

  
    #+end_src
*** Helper Functions
    #+begin_src emacs-lisp :tangle init.el
      (defun exwm/run-in-background (command)
	(let ((command-parts (split-string command "[ ]+")))
	  (apply #'call-proces `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

      (defun exwm/bind-function (key invocation &rest bindings)
	"Bind KEYs to FUNCTIONs globally"
	(while key
	  (exwm-input-set-key (kbd key)
			      `(lambda ()
				 (interactive)
				 (funcall ',invocation)))
	  (setq key (pop bindings)
		invocation (pop bindings))))

      (defun exwm/bind-command (key command &rest bindings)
	"Bind KEYs to COMMANDs globally"
	(while key (exwm-input-set-key (kbd key)
				       `(lambda ()
					  (interactive)
					  (exwm/run-in-background ,command)))
	       (setq key (pop bindings)
		     command (pop bindings))))
    #+end_src
** UI Configuration
*** Basics
    #+begin_src emacs-lisp :tangle init.el 
      (setq inhibit-startup-message t)

      (scroll-bar-mode -1)
      (tool-bar-mode -1)
      (tooltip-mode -1)
      (set-fringe-mode 10)

      (menu-bar-mode -1)

      (setq visible-bell t)

      (column-number-mode)
      (global-display-line-numbers-mode t)

      (dolist (mode '(org-mode-hook
		      term-mode-hook
		      shell-mode-hook
		      treemacs-mode-hook
		      eshell-mode-hook))
	(add-hook mode (lambda () (display-line-numbers-mode 0))))
    #+end_src
** Keybindings
*** ESC cancels all
   #+begin_src emacs-lisp :tangle init.el
     ;; Make ESC quit prompts
     (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
   #+end_src
*** Evil
    #+begin_src emacs-lisp :tangle init.el
      (defun jak/evil-hook ()
	(dolist (mode '(custom-mode
			eshell-mode
			git-rebase-mode
			erc-mode
			circe-server-mode
			circe-chat-mode
			circe-query-mode
			sauron-mode
			term-mode))
	  (add-to-list 'evil-emacs-state-modes mode)))

      (use-package evil
	:init
	(setq evil-want-intergration t)
	(setq evil-want-keybinding nil)
	(setq evil-want-C-u-scroll t)
	(setq evil-want-C-i-jump nil)
	(setq evil-respect-visual-line-mode t)
	:config
	(add-hook 'evil-mode-hook 'jak/evil-hook)
	(evil-mode 1)
	(define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
	(define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backwards-char-and-join)

	;; Use visual line motions even outside of visual-line-mode buffers
	(evil-global-set-key 'motion "j" 'evil-next-visual-line)
	(evil-global-set-key 'motion "k" 'evil-previous-visual-line)


	(evil-set-initial-state 'org-src-mode 'insert)
	(evil-set-initial-state 'messages-buffer-mode 'normal)
	(evil-set-initial-state 'dashboard-mode 'normal))

      (use-package evil-collection
	:after evil
	:custom
	(evil-collection-outline-bind-tab-p nil)
	:config
	(evil-collection-init))

    #+end_src
*** Which-key
    Provids a keybinding panel to show possible further key combonation.
    #+begin_src emacs-lisp :tangle init.el
      (use-package which-key
	:init (which-key-mode)
	:diminish which-key-mode
	:config
	(setq which-key-idle-delay 0.2))
    #+end_src
*** General
    [[https://github.com/noctuid/general.el][general.el]] is a library for defining prefixed keybindings, especially in Evil mode.
    #+begin_src emacs-lisp :tangle init.el
      (use-package general
	:config
	(general-evil-setup t)

	(general-create-definer jak/leader-key-def
	  :keymaps '(normal insert visual emacs)
	  :prefix "SPC"
	  :global-prefix "C-SPC")

	(general-create-definer jak/ctrl-c-keys
	  :prefix "C-c"))
    #+end_src
** General Configuration
*** User Interface
    Clean up Emacs user interface and make it more minimal
    #+begin_src emacs-lisp :tangle init.el
      (setq inhibit-startup-message t)

      (scroll-bar-mode -1)
      (tool-bar-mode -1)
      (tool-tip-mode -1)
      (set-fringe-mode 10)

      (menu-bar-mode -1)

      (setq visible-bell t)
    #+end_src
    Improve scrolling
    #+begin_src emacs-lisp :tangle init.el
      (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
      (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
      (set-frame-parameter (select-frame) 'fullscreen 'maxmimized)
      (add-to-list 'default-frame-alist '(fullscreen . maximized))
    #+end_src
    
    Enable line numbers and customize their format.
    #+begin_src emacs-lisp :tangle init.el
      (column-number-mode)
    
      ;; Enable line numbers for some modes
      (dolist (mode '(text-mode-hook
    		  prog-mode-hook
    		  conf-mode-hook))
        (add-hook mode (lambda () (display-line-numbers-mode 1))))
    
      (dolist (mode '(org-mode-hook))
        (add-hook mode (lambda () (display-line-numbers-mode 0))))
    #+end_src

    Don't warn for large files, like when launching videos
    #+begin_src emacs-lisp :tangle init.el
      (setq large-file-warning-threshold nil)
    #+end_src

    Don't warn for following symlinked files
    #+begin_src emacs-lisp :tangle init.el
      (setq vc-follow-symlinks t)
    #+end_src

    Don't warn when advice is added for functions
    #+begin_src emacs-lisp :tangle init.el
      (setq ad-redefinition-action 'accept)
    #+end_src
*** Theme
    #+begin_src emacs-lisp :tangle init.el
      (use-package doom-themes : defer t)
      (load-theme 'doom-palenight t)
      (doom-themes-visual-bell-config)
    #+end_src
*** Font
    #+begin_src emacs-lisp :tangle init.el
      (defvar jak/default-font-size 180)
      (defvar jak/default-font-variable-font-size 180)

      (defvar jak/frame-transparency '(90 . 90))

      (set-face-attribute 'default nil
			  :font "Fira Code"
			  :height (jak/system-settings-get 'emacs/default-face-size))

      (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height jak/default-font-size)
      (set-face-attribute 'variable-pitch nil :font "Cantarell" :height jak/default-variable-font-size :weight 'regular)
    #+end_src
*** Mode Line
**** Basic Customization
    #+begin_src emacs-lisp :tangle init.el
      (setq display-time-format "%l:%M %p %b %y"
	    display-time-default-load-average nil)
    #+end_src
**** Enable Mode Diminishing
    The [[https://github.com/myrjola/diminish.el][diminish]] package hides minor modes from the modelines.
    #+begin_src emacs-lisp :tangle init.el
      (use-package diminish)
    #+end_src
**** Doom Modeline
    #+begin_src emacs-lisp :tangle init.el
      (use-package minions
	:hook (doom-modeline-mode . minions-mode)
	:custom
	(minions-mode-line-lighter " "))

      (use-package doom-modeline
	:after eshell
	:hook (after-init . doom-modeline-init)
	:custom-face
	(mode-line ((t (:height 0.85))))
	(mode-line-inactive ((t (:height 0.85))))
	:custom
	(doom-modeline-height 15)
	(doom-modeline-bar-width 6)
	(doom-modeline-lsp t)
	(doom-modeline-github nil)
	(doom-modeline-mu4e nil)
	(doom-modeline-irc nil)
	(doom-modeline-minor-modes t)
	(doom-modeline-persp-name nil)
	(doom-modeline-buffer-file-name-style 'truncate-except-project)
	(doom-modeline-major-mode-icon nil))
    #+end_src
*** Notifications
   [[https://github.com/jwiegley/alert][alert]] is a library for showing notifications from other packages in a variety of ways.
   For now I just use it to surface desktop notifications from package code.
   #+begin_src emacs-lisp :tangle init.el
     (use-package alert
       :commands alert
       :config
       (setq alert-default-style 'notifications))
   #+end_src
*** TODO Auto-Saving Changed Files
   #+begin_src emacs-lisp 
     (use-package super-save
       :config
       (super-save-mode +1))
   #+end_src
*** Auto-reverting
    #+begin_src emacs-lisp :tangle init.el
      (global-auto-revert-mode 1)
    #+end_src
*** TODO UI Toggles
    #+begin_src emacs-lisp :tangle init.el
      (jak/leader-key-def
       "t" '(:ignore t :which-key "toggles")
       "tw" 'whitespace-mode
       "tt" (counsel-load-theme :which-key "choose theme"))
    #+end_src
*** Highlight Matching Braces
    #+begin_src emacs-lisp :tangle init.el
      (use-package paren
	:config
	(set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
	(show-paren-mode 1))
    #+end_src
*** Tramp
    #+begin_src emacs-lisp :tangle init.el
      (setq tramp-default-method "ssh")
    #+end_src
*** Emacs as External Editor
    #+begin_src emacs-lisp :tangle init.el
      (defun jak/show-server-edit-buffer (buffer)
	;; TODO: Set a transient keymap to close with 'C-c C-c'
	(split-window-vertically -15)
	(other-window 1)
	(set-buffer buffer))

      (setq server-window #'jak/show-server-edit-buffer)
    #+end_src
** Editing Configuration
*** Tab Widths
    #+begin_src emacs-lisp :tangle init.el
      (setq-default tab-width 2)
      (setq-default evil-shift-width tab-width)
    #+end_src
*** Use spaces instead of tabs
    #+begin_src emacs-lisp :tangle init.el
      (setq-default indent-tabs-mode nil)
    #+end_src
*** Commenting Lines
    #+begin_src emacs-lisp :tangle init.el
      (use-package evil-nerd-commenter
	:bind ("M-/" . evilnc-comment-or-uncomment-lines))
    #+end_src
*** Automatically clean whitespace
    #+begin_src emacs-lisp :tangle init.el
      (use-package ws-butler
	:hook ((text-mode . ws-butler-mode)
	       (prog-mode . ws-butler-mode)))
    #+end_src
** Configuration Files
*** Helpers
    #+begin_src  emacs-lisp :tangle init.el
      (defun jak/org-file-jump-to-heading (org-file heading-title)
	(interactive)
	(find-file (expand-file-name org-file))
	(goto-char (point-min))
	(search-forward (concat "* " heading-title))
	(org-overview)
	(org-reveal)
	(org-show-subtree)
	(forward-line))

      (defun jak/org-file-show-headings (org-file)
	(interactive)
	(find-file (expand-file-name org-file))
	(counsel-org-togo)
	(org-overview)
	(org-reveal)
	(org-show-subtree)
	(forward-line))
    #+end_src
** Org Mode
*** Org Configuration
    Set up Org Mode with baseline configuration.
    The following sections will add more things to it.
    #+begin_src emacs-lisp :tangle init.el

      (setq-default fill-column 100)

      (defun jak/org-mode-setup ()
	(org-indent-mode)
	(variable-pitch-mode 1)
	(auto-fill-mode 0)
	(visual-line-mode 1)
	(setq evil-auto-indent nil)
	(diminish org-indent-mode))

      (use-package org
	:defer t
	:hook (org-mode . jak/org-mode-setup)
	:config
	(setq org-ellipsis " ▾"
	      org-hide-emphasis-markers t
	      org-src-fontify-natively t
	      org-src-tab-acts-natively t
	      org-edit-src-content-indentation 2
	      org-hide-block-startup nil
	      org-src-preserve-indentation nil
	      org-startup-folded 'content
	      org-cycle-separator-lines 2)

	(setq org-modules
	      '(org-crypt
		org-habit
		org-bookmark
		org-eshell
		org-irc))

	(setq org-refile-targets '((nil :maxlevel . 2)
				   (org-agenda-files :maxlevel . 2)))

	(setq org-outline-path-complete-in-steps nil)
	(setq org-refile-use-outline-path t)

	(evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'org-next-visible-heading)
	(evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'org-previous-visible-heading)
	(evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
	(evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup)

	(org-babel-do-load-languages
	 'org-babel-load-languages
	 '((emacs-lisp . t)
	   (ledger . t)))

	(push '("conf-unix" . conf-unix) org-src-lang-modes)
	;; Inserting sections below this for org-mode
	;; ) ;; Uncomment this line if this is the last block for org-mode
    #+end_src
*** File Paths
    Some important locations for Org Mode
    #+begin_src emacs-lisp :tangle init.el

      (setq org-directory "~/org")

      (defun jak/org-path (path)
	(expand-file-name path org-directory))

      (setq org-default-notes-file (jak/org-path "Inbox.org"))
    #+end_src
*** Workflow States
    #+begin_src emacs-lisp :tangle init.el

      (setq org-todo-keywords
	    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
	      (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANCEL(k@)")))

    #+end_src
*** Tags
    Tags are used to filter all tasks to find anything actionable in a particular context.
    I use the ~@home~ and ~@work~ tags for explicit contexts and then the rest are used for filtering tasks for agenda views.

    - ~followup~ - Someone is waiting on me to follow up on this task, it should be prioritized above others
    - ~batch~ - The task can be batched with others.
    #+begin_src emacs-lisp :tangle init.el

      (setq org-tag-alist
	    '((:startgroup)
	       ;Put mutually exclusive tags here
	      (:endgroup)
	      ("@home" . ?H)
	      ("@work" . ?W)
	      ("batch" . ?b)
	      ("followup" . ?f)))
    #+end_src
*** Agendas
    #+begin_src emacs-lisp :tangle init.el

      (setq org-agenda-window-setup 'current-window)
      (setq org-agenda-span 'day)
      (setq org-agenda-start-with-log-mode t)

      (setq org-agenda-custom-commands
	    `(("d" "Dashboard"
	       ((agenda "" ((org-deadline-warning-days 7)))
		(tags-todo "+PRIORITY=\"A\""
			   ((org-agenda-overriding-header "High Priority")))
		(tags-todo "+followup" ((org-agenda-overriding-header "Needs Follow Up")))
		(todo "NEXT"
		      ((org-agenda-overriding-header "Next Action")))
		(todo "TODO"
		      ((org-agenda-overriding-header "Unprocessed Inbox Tasks")
		       (org-agenda-files '(,(jak/org-path "Inbox.org")))
		       (org-agenda-text-search-extra-files nil)))))
	      ("n" "Next Tasks"
	       ((agenda "" ((org-deadline-warning-days 7 )))
		(todo "NEXT"
		      ((org-agenda-overriding-header "Next Tasks")))))
	      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
	       ((org-agenda-overriding-header "Low Effort Tasks")
		(org-agenda-max-todos 20)
		(org-agenda-files org-agenda-files)))))
    #+end_src
*** Capture Templates
    #+begin_src emacs-lisp :tangle init.el

      (defun jak/get-todays-journal-file-name ()
	"Gets the journal file name for today's date"
	(interactive)
	(let* ((journal-file-name
		(expand-file-name
		 (format-time-string "%Y/%Y-%2m-%B.org")
		 (jak/org-path "Journal/")))
	       (journal-year-dir (file-name-directory journal-file-name)))
	  (if (not (file-directory-p journal-year-dir))
	      (make-directory journal-year-dir))
	  journal-file-name))

      (defun jak/on-org-capture ()
	(setq header-line-format nil)

	(let ((template (org-capture-get :key t)))
	  (pcase template
	    ("jj" (delete-other-windows)))))

      (add-hook 'org-capture-mode-hook 'jak/on-org-capture)

      (setq org-capture-templates
	    `(("t" "Task")
	      ("tt" "Task" entry (file ,(jak/org-path "Inbox.org"))
	       "* TODO %?\n %U\n %a\n %i" :empty-lines 1)
	      ("ts" "Clocked Entry Subtask" entry (clock)
	       "* TODO %?\n %U\n %a\n %i" :empty-lines 1)

	      ("j" "Journal Entries")
	      ("je" "General Entry" entry
	       (file+olp+datatree ,(jak/org-path "Journal.org"))
	       "\n* %<%I:%M %p> - %^{Title} \n\n%?\n\n"
	       :tree-type week
	       :clock-in :clock-resume
	       :empty-lines 1)
	      ("jt" "Task Entry" entry
	       (file+olp+datatree ,(jak/org-path "Journal.org"))
	       "\n* %<%I:%M %p> - Task Notes: %a\n\n%?\n\n"
	       :tree-type week
	       :clock-in :clock-resume
	       :empty-lines 1)
	      ("jj" "Journal" entry
	       (file+olp+datetree ,(jak/org-path "Journal.org"))
	       "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
	       :tree-type week
	       :clock-in :clock-resume
	       :empty-lines 1)))
    #+end_src
*** Source editing
    #+begin_src emacs-lisp :tangle init.el
      (setq org-src-window-setup 'current-window)

    #+end_src
*** Block Templates
    #+begin_src emacs-lisp :tangle init.el
      (require 'org-tempo)

      (add-to-list 'org-structure-template-alist '("el"  . "src emacs-lisp"))
      (add-to-list 'org-structure-template-alist '("nix" . "src nix"))
    #+end_src
*** TODO Pomodoro
    #+begin_src emacs-lisp
      (use-package org-pomodoro
	:after org)
    #+end_src
*** Searching
    #+begin_src emacs-lisp :tangle init.el

      (defun jak/search-org-files ()
	(interactive)
	(counsel-rg "" "~/Notes" nil "Search Notes: "))
    #+end_src
*** Bindings
    #+begin_src emacs-lisp :tangle init.el

      (use-package evil-org
	:after org
	:hook ((org-mode . evil-org-mode)
	       (org-agenda-mode . evil-org-mode)
	       (evil-org-mode . (lambda () (evil-org-set-key-theme '(navigation todo insert textobjects additional)))))
	:config
	(require 'evil-org-agenda)
	(evil-org-agenda-set-keys))

      (jak/leader-key-def
       "o"    '(:ignore t :which-key "org mode")

       "oi"   '(:ignore t :which-key "insert")
       "oil"  '(org-insert-link :which-key "insert link")

       "on"   '(org-toggle-narrow-to-subtree :which-key "toggle narrow")

       "os"   '(jak/counsel-rg-org-files :which-key "search notes")

       "oa"   '(org-agenda :which-key "status")
       "oc"   '(org-capture t :which-key "capture")
       "ox"   '(org-export-dispatch t :which-key "export"))

    #+end_src
*** Automatically "Tangle" on Save

    #+begin_src emacs-lisp :tangle init.el

      (defun jak/org-babel-tangle-dont-ask ()
	(let ((org-confirm-babel-evaluate nil))
	  (org-babel-tangle)))

      (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'jak/org-babel-tangle-dont-ask
						    'run-at-end 'only-in-org-mode)))
    #+end_src
*** Closing
    This block is only to add a last parenthesis
    #+begin_src emacs-lisp :tangle init.el
      ;; This in it's one block for org-mode reasons
      )

    #+end_src
** Development
*** git
**** magit
     https://magit.vc/manual/magit/
     #+begin_src emacs-lisp :tangle init.el
       (use-package magit
	 :commands (magit-status magit-get-current-branch)
	 :custom
	 (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

       (use-package evil-magit
	 :after magit)

       (global-set-key (kbd "C-M-;") 'magit-status)

       (jak/leader-key-def
	"g"    '(:ignore t :which-key "git")
	"gs"   'magit-status
	"gd"   'magit-diff-unstaged
	"gc"   'magit-branch-or-checkout
	"gl"   '(:ignore t :which-key "log")
	"glc"  'magit-log-current
	"glf"  'magit-log-buffer-file
	"gb"   'magit-branch
	"gP"   'magit-push-current
	"gp"   'magit-pull-branch
	"gf"   'magit-fetch
	"gF"   'magit-fetch-all
	"gr"   'magit-rebase)
     #+end_src
**** magit-todos
     This extension to Magit shows a TODOs section in your git status buffer
     containing all lines with TODO in files contained within the repo. More info in the [[https://github.com/alphapapa/magit-todos][Github repo]].
     #+begin_src emacs-lisp :tangle init.el
       (use-package magit-todos
	 :defer t)
     #+end_src
**** git-link
     #+begin_src emacs-lisp :tangle init.el
       (use-package git-link
	 :commands git-link
	 :config
	 (setq git-link-open-in-browser t)
	 (jak/leader-key-def
	  "gL" 'git-link))
     #+end_src
*** Projectile
**** Initial Setup
     #+begin_src emacs-lisp :tangle init.el
       (use-package projectile
	 :diminish projectile-mode
	 :config (projectile-mode)
	 :bind-keymap
	 ("C-c p" . projectile-command-map)
	 :init
	 (when (file-directory-p "~/projects/")
	   (setq projectile-project-search-path '("~/projects/")))
	 (setq projectile-switch-project-action #'projectile-dired))

       (use-package counsel-projectile
	 :after projectile)

       (jak/leader-key-def
	"pf" 'counsel-projectile-find-file
	"ps" 'counsel-projectile-switch-project
	"pF" 'counsel-projectile-rg
	"pp" 'counsel-projectile
	"pc" 'projectile-compile-project
	"pd" 'projectile-dired)
     #+end_src
*** Languages 
**** Language Server Support
     #+begin_src emacs-lisp :tangle init.el
;;       (use-package ivy-xref
;;	 :init (if (< emacs-major-version 27)
;;		   (setq xref-show-xrefs-functions #'ivy-xref-show-xrefs)
;;		 (setq xref-show-definitions-function #'ivy-xref-show-defs)))

       (use-package lsp-mode
	 :commands lsp
	 :hook ((typescript-mode js2-mode web-mode) . lsp)
	 :bind (:map lsp-mode-map
		     ("TAB" . completion-at-point)))

       (jak/leader-key-def
	"l"  '(:ignore t :which-key "lsp")
	"ld" 'xref-find-definitions
	"lr" 'xref-find-references
	"ln" 'lsp-ui-find-next-reference
	"lp" 'lsp-ui-find-previous-reference
	"ls" 'counsel-imenu
	"le" 'lsp-ui-flycheck-list
	"lS" 'lsp-ui-sideline-mode
	"lx" 'lsp-execute-code-action)

       (use-package lsp-ui
	 :hook (lsp-mode . lsp-ui-mode)
	 :config
	 (setq lsp-ui-sideline-enable t)
	 (setq lsp-ui-sideline-show-hover t)
	 (setq lsp-ui-doc-position 'bottom)
	 (lsp-ui-doc-show))
     #+end_src
**** Meta Lisp
     #+begin_src emacs-lisp :tangle init.el
       (use-package lispy
	 :hook ((emacs-lisp-mode . lispy-mode)
		(scheme-mode     . lispy-mode)))

       (use-package lispyville
	 :disabled
	 :hook ((lispy-mode . lispyville-mode))
	 :config
	 (lispyville-set-key-theme '(operators c-w additional)))
     #+end_src
**** Scheme
     #+begin_src emacs-lisp :tangle init.el
       (use-package scheme-mode
	 :mode "\\.sld\\'")
     #+end_src
**** Emacs Lisp
     #+begin_src emacs-lisp :tangle init.el
       (add-hook 'emacs-lisp-mode-hook #'flycheck-mode)

       (use-package helpful
	 :ensure t
	 :custom
	 (counsel-describe-function-function #'helpful-callable)
	 (counsel-describe-variable-function #'helpful-variable)
	 :bind
	 ([remap describe-function] . counsel-describe-function)
	 ([remap describe-command] . helpful-command)
	 ([remap describe-variable] . counsel-describe-variable)
	 ([remap describe-key] .helpful-key))

       (jak/leader-key-def
	"e"    '(:ignore t :which-key "eval")
	"eb"   '(eval-buffer :which-key "eval buffer"))

       (jak/leader-key-def
	:keymaps '(visual)
	"er" '(eval-region :which-key "eval region"))
     #+end_src
**** Scheme
     #+begin_src emacs-lisp :tangle init.el
       (use-package geiser
	 :ensure t
	 :config
	 (setq geiser-default-implementation 'guile)
	 (setq geiser-active-implementation '(gambit guile))
	 (setq geiser-repl-default-port 44555)
	 (setq geiser-implementations-alist '(((regexp "\\.scm$") gambit)
					       ((regexp "\\.sld") gambit))))
     #+end_src
**** Markdown
     #+begin_src emacs-lisp :tangle init.el
       (use-package markdown-mode
	 :mode "\\.md\\'"
	 :config
	 (setq markdown-command "marked")
	 (defun jak/set-markdown-header-font-sizes ()
	   (dolist (face '((markdown-header-face-1 . 1.2)
			   (markdown-header-face-2 . 1.1)
			   (markdown-header-face-3 . 1.0)
			   (markdown-header-face-4 . 1.0)
			   (markdown-header-face-5 . 1.0)))
	     (set-face-attribute (car face) nil :weight 'normal :height (cdr face))))

	 (defun jak/markdown-mode-hook ()
	   (jak/set-makrdown-header-font-sizes))

	 (add-hook 'markdown-mode-hook 'jak/markdown-mode-hook))
     #+end_src
**** HTML
     #+begin_src emacs-lisp :tangle init.el

     #+end_src
** Productivity
*** Syntax checking with Flycheck
    #+begin_src emacs-lisp :tangle init.el
      (use-package flycheck
	:defer t
	:hook (lsp-mode . flycheck-mode))

    #+end_src
*** Snippets
    #+begin_src emacs-lisp :tangle init.el
      (use-package yasnippet
	:hook (prog-mode . yas-minor-mode)
	:config
	(yas-reload-all))
    #+end_src
*** Smart Parens
    #+begin_src emacs-lisp :tangle init.el
      (use-package smartparens
	:hook (prog-mode . smartparens-mode))
    #+end_src
*** Rainbow Delimiters
    #+begin_src emacs-lisp :tangle init.el
      (use-package rainbow-delimiters
	:hook (prog-mode . rainbow-delimiters-mode))
    #+end_src
*** Rainbow Mode
    Sets the background of HTML color strings in buffers to be the color mentioned.
    #+begin_src emacs-lisp :tangle init.el
      (use-package rainbow-mode
	:defer t
	:hook (org-mode
	       emacs-lisp-mode
	       web-mode
	       typescript-mode
	       js2-mode))
    #+end_src
** Writing (Prose)
*** Darkroom
    #+begin_src emacs-lisp :tangle init.el
      (use-package darkroom
	:commands darkroom-mode
	:config
	(setq darkroom-text-scale-increase 0))

      (defun jak/enter-focus-mode ()
	(interactive)
	(darkroom-mode 1)
	(display-line-numbers-mode 0))

      (defun jak/leave-focus-mode ()
	(interactive)
	(darkroom 0)
	(display-line-numbers 1))

      (defun jak/toggle-focus-mode ()
	(interactive)
	(if (symbol-value darkroom-mode)
	    (jak/leave-focus-mode)
	  (jak/enter-focus-mode)))

      (jak/leader-key-def
       "tf" '(jak/toggle-focus-mode :which-key "focus mode"))
    #+end_src
** Applications
*** Binding Prefix
    #+begin_src emacs-lisp :tangle init.el
      (jak/leader-key-def
       "a" '(:ignore t :which-key "apps"))
    #+end_src
*** Mail
**** TODO mu4e
     #+begin_src emacs-lisp
       (use-package mu4e
	 :config

	 (require 'org-mu4e)
	 (setq mail-user-agent 'mu4e-user-agent)

	 ;; Refresh mail using offlineimap every 10 minutes
	 (setq mu4e-update-interval (* 10 60))
	 (setq mu4e-get-mail-command "offlineimap")
	 (setq mu4e-maildir "~/Mail")

	 ;; Set up contexts for email accounts
	 (setq mu4e-contexts
	       `(,(make-mu4e-context
		   :name "Boldman.co"
     #+end_src
*** Calendar
    [[https://github.com/kiwanami/emacs-calfw][calfw]] is a calendar UI that is able to show all of the scheduled Org Agenda items.
    #+begin_src emacs-lisp :tangle init.el
      (use-package calfw
	:disabled
	:commands cfw:open-org-calendar
	:config
	 (setq cfw:fchar-junction ?╋
	      cfw:fchar-vertical-line ?┃
	      cfw:fchar-horizontal-line ?━
	      cfw:fchar-left-junction ?┣
	      cfw:fchar-right-junction ?┫
	      cfw:fchar-top-junction ?┯
	      cfw:fchar-top-left-corner ?┏
	      cfw:fchar-top-right-corner ?┓)

	 (use-package calfw-org
	   :config
	   (setq cfw:org-agenda-schedule-arg '(:timestamp))))

      (jak/leader-key-def
       "cc"  '(cfw:open-org-calendar :which-key "calendar"))
    #+end_src
*** Finance
    #+begin_src emacs-lisp :tangle init.el
      (use-package ledger-mode
	:mode "\\.lgr\\'"
	:bind (:map ledger-mode-map
		    ("TAB" . completion-at-point))
	:custom
	  (ledger-reports '(("bal" "%(binary) -f %(ledger-file) bal")
			  ("bal this quarter" "%(binary) -f %(ledger-file) --period \"this quarter\" bal")
			  ("bal last quarter" "%(binary) -f %(ledger-file) --period \"last quarter\" bal")
			  ("reg" "%(binary) -f %(ledger-file) reg")
			  ("payee" "%(binary) -f %(ledger-file) reg @%(payee)")
			  ("account" "%(binary) -f %(ledger-file) reg %(account)"))))
    #+end_src
*** EMMS
    #+begin_src emacs-lisp :tangle init.el
      (use-package emms
	:commands emms
	:config
	(require 'emms-setup)
	(emms-standard)
	(emms-default-players)
	(emms-mode-line-disable)
	(setq emms-source-file-default-directory "~/Music")
	(jak/leader-key-def
	 "am"  '(:ignore t :which-key "media")
	 "amp" '(emms-pause :which-key "play / pause")
	 "amf" '(emms-play-file :which-key "play file")))
    #+end_src
** System Utilites
*** Guix 
   #+begin_src emacs-lisp
     (use-package guix
       :defer t)

     (jak/leader-key-def
      "G"  '(:ignore t :which-key "Guix")
      "Gg" '(guix :which-key "Guix")
      "Gi" '(guix-installed-user-packages :which-key "user package")
      "GI" '(guix-installed-system-packages :which-key "system packages")
      "Gp" '(guix-packages-by-name :which-key "search packages")
      "GP" '(guix-pull :which-key "pull"))
   #+end_src
*** Deamons
    #+begin_src emacs-lisp
      (use-package daemons
	:commands daemons)
    #+end_src
*** PulseAudio
    #+begin_src emacs-lisp :tangle init.el
      (use-package pulseaudio-control
	:commands pulseaudio-control-select-sink-by-name
      )
    #+end_src
* Inspiration
  [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]] contains a host of packages and themes to check out for your own customizations
  
  Other configurations and repos
  - [[https:https://github.com/daedreth/UncleDavesEmacs/blob/master/config.org][Uncle Dave's emacs]]
  - [[https://github.com/daviwil/][david wilson]]
    - [[https://github.com/daviwil/emacs-from-scratch][emacs from scratch]]: beginner friendly configuration tutorial
    - [[https://github.com/daviwil/dotfiles][dotfiles]] : his working configs, including configs for GUIX
