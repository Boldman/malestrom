;;
;; This file is generated by README.org
;; All changes are futile.
;;

;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Profile emacs startup
(add-hook 'emacs-startup-hook
	  (lambda ()
	    (message "*** Emacs loaded in %s with %d garbage collections."
		     (format "%.2f seconds"
			     (float-time
			      (time-subtract after-init-time before-init-time)))
		     gcs-done)))

(require 'package)
(setq package-archive nil)
(setq package-enable-at-startup nil)

;; Do not ensure packages---they are installed with Nix
(setq use-package-always-ensure nil)
;; (setq use-package-verbose t)
(eval-when-compile
  (require 'use-package))
(require 'bind-key)
(require 'diminish)

(server-start)

(use-package exwm
  :init
  (setq mouse-autoselect-window t
	focus-follows-mouse t
	exwm-workspace-warp-cursor t)
  :config
  (require 'exwm-config)
  (fringe-mode 2)
  (setq exwm-workspace-show-all-buffers t)
  (setq exwm-layout-show-all-buffer t)
  (add-hook 'exwm-update-class-hook
	    (lambda ()
	      (exwm-workspace-rename-buffer exwm-class-name)))

  (exwm-enable))

(defun exwm/run-in-background (command)
  (let ((command-parts (split-string command "[ ]+")))
    (apply #'call-proces `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

(defun exwm/bind-function (key invocation &rest bindings)
  "Bind KEYs to FUNCTIONs globally"
  (while key
    (exwm-input-set-key (kbd key)
			`(lambda ()
			   (interactive)
			   (funcall ',invocation)))
    (setq key (pop bindings)
	  invocation (pop bindings))))

(defun exwm/bind-command (key command &rest bindings)
  "Bind KEYs to COMMANDs globally"
  (while key (exwm-input-set-key (kbd key)
				 `(lambda ()
				    (interactive)
				    (exwm/run-in-background ,command)))
	 (setq key (pop bindings)
	       command (pop bindings))))

(setq inhibit-startup-message t)

(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(set-fringe-mode 10)

(menu-bar-mode -1)

(setq visible-bell t)

(column-number-mode)
(global-display-line-numbers-mode t)

(dolist (mode '(org-mode-hook
		term-mode-hook
		shell-mode-hook
		treemacs-mode-hook
		eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(defun jak/evil-hook ()
  (dolist (mode '(custom-mode
		  eshell-mode
		  git-rebase-mode
		  erc-mode
		  circe-server-mode
		  circe-chat-mode
		  circe-query-mode
		  sauron-mode
		  term-mode))
    (add-to-list 'evil-emacs-state-modes mode)))

(use-package evil
  :init
  (setq evil-want-intergration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  (setq evil-respect-visual-line-mode t)
  :config
  (add-hook 'evil-mode-hook 'jak/evil-hook)
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backwards-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)


  (evil-set-initial-state 'org-src-mode 'insert)
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :custom
  (evil-collection-outline-bind-tab-p nil)
  :config
  (evil-collection-init))

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.2))

(use-package general
  :config
  (general-evil-setup t)

  (general-create-definer jak/leader-key-def
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (general-create-definer jak/ctrl-c-keys
    :prefix "C-c"))

(setq inhibit-startup-message t)

(scroll-bar-mode -1)
(tool-bar-mode -1)
(tool-tip-mode -1)
(set-fringe-mode 10)

(menu-bar-mode -1)

(setq visible-bell t)

(set-frame-parameter (selected-frame) 'alpha '(90 . 90))
(add-to-list 'default-frame-alist '(alpha . (90 . 90)))
(set-frame-parameter (select-frame) 'fullscreen 'maxmimized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))

(column-number-mode)

;; Enable line numbers for some modes
(dolist (mode '(text-mode-hook
    	    prog-mode-hook
    	    conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1))))

(dolist (mode '(org-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

(setq large-file-warning-threshold nil)

(setq vc-follow-symlinks t)

(setq ad-redefinition-action 'accept)

(use-package doom-themes : defer t)
(load-theme 'doom-palenight t)
(doom-themes-visual-bell-config)

(defvar jak/default-font-size 180)
(defvar jak/default-font-variable-font-size 180)

(defvar jak/frame-transparency '(90 . 90))

(set-face-attribute 'default nil
		    :font "Fira Code"
		    :height (jak/system-settings-get 'emacs/default-face-size))

(set-face-attribute 'fixed-pitch nil :font "Fira Code" :height jak/default-font-size)
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height jak/default-variable-font-size :weight 'regular)

(setq display-time-format "%l:%M %p %b %y"
      display-time-default-load-average nil)

(use-package diminish)

(use-package minions
  :hook (doom-modeline-mode . minions-mode)
  :custom
  (minions-mode-line-lighter " "))

(use-package doom-modeline
  :after eshell
  :hook (after-init . doom-modeline-init)
  :custom-face
  (mode-line ((t (:height 0.85))))
  (mode-line-inactive ((t (:height 0.85))))
  :custom
  (doom-modeline-height 15)
  (doom-modeline-bar-width 6)
  (doom-modeline-lsp t)
  (doom-modeline-github nil)
  (doom-modeline-mu4e nil)
  (doom-modeline-irc nil)
  (doom-modeline-minor-modes t)
  (doom-modeline-persp-name nil)
  (doom-modeline-buffer-file-name-style 'truncate-except-project)
  (doom-modeline-major-mode-icon nil))

(use-package alert
  :commands alert
  :config
  (setq alert-default-style 'notifications))

(global-auto-revert-mode 1)

(jak/leader-key-def
 "t" '(:ignore t :which-key "toggles")
 "tw" 'whitespace-mode
 "tt" (counsel-load-theme :which-key "choose theme"))

(use-package paren
  :config
  (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
  (show-paren-mode 1))

(setq tramp-default-method "ssh")

(defun jak/show-server-edit-buffer (buffer)
  ;; TODO: Set a transient keymap to close with 'C-c C-c'
  (split-window-vertically -15)
  (other-window 1)
  (set-buffer buffer))

(setq server-window #'jak/show-server-edit-buffer)

(setq-default tab-width 2)
(setq-default evil-shift-width tab-width)

(setq-default indent-tabs-mode nil)

(use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))

(use-package ws-butler
  :hook ((text-mode . ws-butler-mode)
	 (prog-mode . ws-butler-mode)))

(defun jak/org-file-jump-to-heading (org-file heading-title)
  (interactive)
  (find-file (expand-file-name org-file))
  (goto-char (point-min))
  (search-forward (concat "* " heading-title))
  (org-overview)
  (org-reveal)
  (org-show-subtree)
  (forward-line))

(defun jak/org-file-show-headings (org-file)
  (interactive)
  (find-file (expand-file-name org-file))
  (counsel-org-togo)
  (org-overview)
  (org-reveal)
  (org-show-subtree)
  (forward-line))

(setq-default fill-column 100)

(defun jak/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (setq evil-auto-indent nil)
  (diminish org-indent-mode))

(use-package org
  :defer t
  :hook (org-mode . jak/org-mode-setup)
  :config
  (setq org-ellipsis " ▾"
	org-hide-emphasis-markers t
	org-src-fontify-natively t
	org-src-tab-acts-natively t
	org-edit-src-content-indentation 2
	org-hide-block-startup nil
	org-src-preserve-indentation nil
	org-startup-folded 'content
	org-cycle-separator-lines 2)

  (setq org-modules
	'(org-crypt
	  org-habit
	  org-bookmark
	  org-eshell
	  org-irc))

  (setq org-refile-targets '((nil :maxlevel . 2)
			     (org-agenda-files :maxlevel . 2)))

  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-use-outline-path t)

  (evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'org-next-visible-heading)
  (evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'org-previous-visible-heading)
  (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
  (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ledger . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)
  ;; Inserting sections below this for org-mode
  ;; ) ;; Uncomment this line if this is the last block for org-mode

(setq org-directory "~/org")

(defun jak/org-path (path)
  (expand-file-name path org-directory))

(setq org-default-notes-file (jak/org-path "Inbox.org"))

(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
	(sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANCEL(k@)")))

(setq org-tag-alist
      '((:startgroup)
	 ;Put mutually exclusive tags here
	(:endgroup)
	("@home" . ?H)
	("@work" . ?W)
	("batch" . ?b)
	("followup" . ?f)))

(setq org-agenda-window-setup 'current-window)
(setq org-agenda-span 'day)
(setq org-agenda-start-with-log-mode t)

(setq org-agenda-custom-commands
      `(("d" "Dashboard"
	 ((agenda "" ((org-deadline-warning-days 7)))
	  (tags-todo "+PRIORITY=\"A\""
		     ((org-agenda-overriding-header "High Priority")))
	  (tags-todo "+followup" ((org-agenda-overriding-header "Needs Follow Up")))
	  (todo "NEXT"
		((org-agenda-overriding-header "Next Action")))
	  (todo "TODO"
		((org-agenda-overriding-header "Unprocessed Inbox Tasks")
		 (org-agenda-files '(,(jak/org-path "Inbox.org")))
		 (org-agenda-text-search-extra-files nil)))))
	("n" "Next Tasks"
	 ((agenda "" ((org-deadline-warning-days 7 )))
	  (todo "NEXT"
		((org-agenda-overriding-header "Next Tasks")))))
	("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
	 ((org-agenda-overriding-header "Low Effort Tasks")
	  (org-agenda-max-todos 20)
	  (org-agenda-files org-agenda-files)))))

(defun jak/get-todays-journal-file-name ()
  "Gets the journal file name for today's date"
  (interactive)
  (let* ((journal-file-name
	  (expand-file-name
	   (format-time-string "%Y/%Y-%2m-%B.org")
	   (jak/org-path "Journal/")))
	 (journal-year-dir (file-name-directory journal-file-name)))
    (if (not (file-directory-p journal-year-dir))
	(make-directory journal-year-dir))
    journal-file-name))

(defun jak/on-org-capture ()
  (setq header-line-format nil)

  (let ((template (org-capture-get :key t)))
    (pcase template
      ("jj" (delete-other-windows)))))

(add-hook 'org-capture-mode-hook 'jak/on-org-capture)

(setq org-capture-templates
      `(("t" "Task")
	("tt" "Task" entry (file ,(jak/org-path "Inbox.org"))
	 "* TODO %?\n %U\n %a\n %i" :empty-lines 1)
	("ts" "Clocked Entry Subtask" entry (clock)
	 "* TODO %?\n %U\n %a\n %i" :empty-lines 1)

	("j" "Journal Entries")
	("je" "General Entry" entry
	 (file+olp+datatree ,(jak/org-path "Journal.org"))
	 "\n* %<%I:%M %p> - %^{Title} \n\n%?\n\n"
	 :tree-type week
	 :clock-in :clock-resume
	 :empty-lines 1)
	("jt" "Task Entry" entry
	 (file+olp+datatree ,(jak/org-path "Journal.org"))
	 "\n* %<%I:%M %p> - Task Notes: %a\n\n%?\n\n"
	 :tree-type week
	 :clock-in :clock-resume
	 :empty-lines 1)
	("jj" "Journal" entry
	 (file+olp+datetree ,(jak/org-path "Journal.org"))
	 "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
	 :tree-type week
	 :clock-in :clock-resume
	 :empty-lines 1)))

(setq org-src-window-setup 'current-window)

(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("el"  . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("nix" . "src nix"))

(defun jak/search-org-files ()
  (interactive)
  (counsel-rg "" "~/Notes" nil "Search Notes: "))

(use-package evil-org
  :after org
  :hook ((org-mode . evil-org-mode)
	 (org-agenda-mode . evil-org-mode)
	 (evil-org-mode . (lambda () (evil-org-set-key-theme '(navigation todo insert textobjects additional)))))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

(jak/leader-key-def
 "o"    '(:ignore t :which-key "org mode")

 "oi"   '(:ignore t :which-key "insert")
 "oil"  '(org-insert-link :which-key "insert link")

 "on"   '(org-toggle-narrow-to-subtree :which-key "toggle narrow")

 "os"   '(jak/counsel-rg-org-files :which-key "search notes")

 "oa"   '(org-agenda :which-key "status")
 "oc"   '(org-capture t :which-key "capture")
 "ox"   '(org-export-dispatch t :which-key "export"))

(defun jak/org-babel-tangle-dont-ask ()
  (let ((org-confirm-babel-evaluate nil))
    (org-babel-tangle)))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'jak/org-babel-tangle-dont-ask
					      'run-at-end 'only-in-org-mode)))

;; This in it's one block for org-mode reasons
)

(use-package magit
  :commands (magit-status magit-get-current-branch)
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(use-package evil-magit
  :after magit)

(global-set-key (kbd "C-M-;") 'magit-status)

(jak/leader-key-def
 "g"    '(:ignore t :which-key "git")
 "gs"   'magit-status
 "gd"   'magit-diff-unstaged
 "gc"   'magit-branch-or-checkout
 "gl"   '(:ignore t :which-key "log")
 "glc"  'magit-log-current
 "glf"  'magit-log-buffer-file
 "gb"   'magit-branch
 "gP"   'magit-push-current
 "gp"   'magit-pull-branch
 "gf"   'magit-fetch
 "gF"   'magit-fetch-all
 "gr"   'magit-rebase)

(use-package magit-todos
  :defer t)

(use-package git-link
  :commands git-link
  :config
  (setq git-link-open-in-browser t)
  (jak/leader-key-def
   "gL" 'git-link))

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/projects/")
    (setq projectile-project-search-path '("~/projects/")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :after projectile)

(jak/leader-key-def
 "pf" 'counsel-projectile-find-file
 "ps" 'counsel-projectile-switch-project
 "pF" 'counsel-projectile-rg
 "pp" 'counsel-projectile
 "pc" 'projectile-compile-project
 "pd" 'projectile-dired)

;;       (use-package ivy-xref
;;	 :init (if (< emacs-major-version 27)
;;		   (setq xref-show-xrefs-functions #'ivy-xref-show-xrefs)
;;		 (setq xref-show-definitions-function #'ivy-xref-show-defs)))

       (use-package lsp-mode
	 :commands lsp
	 :hook ((typescript-mode js2-mode web-mode) . lsp)
	 :bind (:map lsp-mode-map
		     ("TAB" . completion-at-point)))

       (jak/leader-key-def
	"l"  '(:ignore t :which-key "lsp")
	"ld" 'xref-find-definitions
	"lr" 'xref-find-references
	"ln" 'lsp-ui-find-next-reference
	"lp" 'lsp-ui-find-previous-reference
	"ls" 'counsel-imenu
	"le" 'lsp-ui-flycheck-list
	"lS" 'lsp-ui-sideline-mode
	"lx" 'lsp-execute-code-action)

       (use-package lsp-ui
	 :hook (lsp-mode . lsp-ui-mode)
	 :config
	 (setq lsp-ui-sideline-enable t)
	 (setq lsp-ui-sideline-show-hover t)
	 (setq lsp-ui-doc-position 'bottom)
	 (lsp-ui-doc-show))

(use-package lispy
  :hook ((emacs-lisp-mode . lispy-mode)
	 (scheme-mode     . lispy-mode)))

(use-package lispyville
  :disabled
  :hook ((lispy-mode . lispyville-mode))
  :config
  (lispyville-set-key-theme '(operators c-w additional)))

(use-package scheme-mode
  :mode "\\.sld\\'")

(add-hook 'emacs-lisp-mode-hook #'flycheck-mode)

(use-package helpful
  :ensure t
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] .helpful-key))

(jak/leader-key-def
 "e"    '(:ignore t :which-key "eval")
 "eb"   '(eval-buffer :which-key "eval buffer"))

(jak/leader-key-def
 :keymaps '(visual)
 "er" '(eval-region :which-key "eval region"))

(use-package geiser
  :ensure t
  :config
  (setq geiser-default-implementation 'guile)
  (setq geiser-active-implementation '(gambit guile))
  (setq geiser-repl-default-port 44555)
  (setq geiser-implementations-alist '(((regexp "\\.scm$") gambit)
					((regexp "\\.sld") gambit))))

(use-package markdown-mode
  :mode "\\.md\\'"
  :config
  (setq markdown-command "marked")
  (defun jak/set-markdown-header-font-sizes ()
    (dolist (face '((markdown-header-face-1 . 1.2)
		    (markdown-header-face-2 . 1.1)
		    (markdown-header-face-3 . 1.0)
		    (markdown-header-face-4 . 1.0)
		    (markdown-header-face-5 . 1.0)))
      (set-face-attribute (car face) nil :weight 'normal :height (cdr face))))

  (defun jak/markdown-mode-hook ()
    (jak/set-makrdown-header-font-sizes))

  (add-hook 'markdown-mode-hook 'jak/markdown-mode-hook))



(use-package flycheck
  :defer t
  :hook (lsp-mode . flycheck-mode))

(use-package yasnippet
  :hook (prog-mode . yas-minor-mode)
  :config
  (yas-reload-all))

(use-package smartparens
  :hook (prog-mode . smartparens-mode))

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package rainbow-mode
  :defer t
  :hook (org-mode
	 emacs-lisp-mode
	 web-mode
	 typescript-mode
	 js2-mode))

(use-package darkroom
  :commands darkroom-mode
  :config
  (setq darkroom-text-scale-increase 0))

(defun jak/enter-focus-mode ()
  (interactive)
  (darkroom-mode 1)
  (display-line-numbers-mode 0))

(defun jak/leave-focus-mode ()
  (interactive)
  (darkroom 0)
  (display-line-numbers 1))

(defun jak/toggle-focus-mode ()
  (interactive)
  (if (symbol-value darkroom-mode)
      (jak/leave-focus-mode)
    (jak/enter-focus-mode)))

(jak/leader-key-def
 "tf" '(jak/toggle-focus-mode :which-key "focus mode"))

(jak/leader-key-def
 "a" '(:ignore t :which-key "apps"))

(use-package calfw
  :disabled
  :commands cfw:open-org-calendar
  :config
   (setq cfw:fchar-junction ?╋
	cfw:fchar-vertical-line ?┃
	cfw:fchar-horizontal-line ?━
	cfw:fchar-left-junction ?┣
	cfw:fchar-right-junction ?┫
	cfw:fchar-top-junction ?┯
	cfw:fchar-top-left-corner ?┏
	cfw:fchar-top-right-corner ?┓)

   (use-package calfw-org
     :config
     (setq cfw:org-agenda-schedule-arg '(:timestamp))))

(jak/leader-key-def
 "cc"  '(cfw:open-org-calendar :which-key "calendar"))

(use-package ledger-mode
  :mode "\\.lgr\\'"
  :bind (:map ledger-mode-map
	      ("TAB" . completion-at-point))
  :custom
    (ledger-reports '(("bal" "%(binary) -f %(ledger-file) bal")
		    ("bal this quarter" "%(binary) -f %(ledger-file) --period \"this quarter\" bal")
		    ("bal last quarter" "%(binary) -f %(ledger-file) --period \"last quarter\" bal")
		    ("reg" "%(binary) -f %(ledger-file) reg")
		    ("payee" "%(binary) -f %(ledger-file) reg @%(payee)")
		    ("account" "%(binary) -f %(ledger-file) reg %(account)"))))

(use-package emms
  :commands emms
  :config
  (require 'emms-setup)
  (emms-standard)
  (emms-default-players)
  (emms-mode-line-disable)
  (setq emms-source-file-default-directory "~/Music")
  (jak/leader-key-def
   "am"  '(:ignore t :which-key "media")
   "amp" '(emms-pause :which-key "play / pause")
   "amf" '(emms-play-file :which-key "play file")))

(use-package pulseaudio-control
  :commands pulseaudio-control-select-sink-by-name
)
